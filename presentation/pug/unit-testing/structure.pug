
section
  section
    h2 How should you structure your tests?
    ul
      li A test
      li A test file

  section
    h3 Test structure
    ul
      li Given (Arrange)
      li When (Act)
      li Then (Assert)
    blockquote.
      A behavior test tends to only include one assertions (rarely more).

  style.
    ol.level {
      counter-reset: item -1;
      list-style-type: none;
    }

    ol.level li:before {
      content: 'L' counter(item, decimal) ': ';
      counter-increment: item;
    }

  - var L0 = "Getting familiar"
  - var L1 = "Depend on class (DI)"
  - var L2 = "Depend on class internal"
  - var L3 = "Test setup dependency"
  - var L4 = "Multi level describes"
  - var L5 = "Async tests"
  - var L6 = "Automate test creation"

  section
    h3 Test file structure
    ol(class='level')
      li=L0
      li=L1
      li=L2
      li=L3
      li=L4
      li=L5
      li=L6

  mixin L0_Base(highlight = "")
    section(data-auto-animate data-auto-animate-id="L0")
      h3(data-id="code-title" class="level") L0: #{L0}
      pre(data-id="code-animation")
        code(class='language-typescript' data-line-numbers=highlight)
          | class Component {
          |   greet() { return "hello world"; }
          | }
          |
          |
          block

  +L0_Base()

  +L0_Base("5-9").
    describe("L0", () => {
      let sut: Component;

      beforeEach(() => sut = new Component());
    });

  +L0_Base("10-13").
    describe("L0", () => {
      let sut: Component;

      beforeEach(() => sut = new Component());

      it("should return hello world", () => {
        const result = sut.greet();
        expect(result).to.equal("hello world");
      });
    });

  +L0_Base("10-18").
    describe("L0", () => {
      let sut: Component;

      beforeEach(() => sut = new Component());

      it("should return hello world", () => {
        // Given

        // When
        const result = sut.greet();

        // Then
        expect(result).to.equal("hello world");
      });
    });

  mixin L1_Base(highlight = "")
    section(data-auto-animate data-auto-animate-id="L1")
      h3(data-id="code-title" class="level") L1: #{L1}
      pre(data-id="code-animation")
        code(class='language-typescript' data-line-numbers=highlight)
          | class Service {
          |   getItems() { return fetch('www.get-items.com'); }
          | }
          |
          | class Component {
          |   constructor(private service: Service) { }
          |   getGroupedItems() {
          |     return this.service.getItems()
          |       .then(response => response.json())
          |       .then(items => items.reduce(
          |         (map, item) => {
          |           const group = map.get(item.group) ?? [];
          |           group.push(item);
          |           map.set(item.group, group);
          |           return map;
          |         }, new Map())
          |       );
          |   }
          | }
          |
          |
          block

  +L1_Base("|7,16")

  +L1_Base("21-31|23,26,29").
    describe("L1", () => {
      let sut: Component;
      let service: StubbedInstance&lt;Service>;

      beforeEach(() => {
        service = stubInterface&lt;Service>();
        sut = new Component(service);
      });
      afterEach(() => sinon.restore());
    });

  +L1_Base("31-40").
    describe("L1", () => {
      let sut: Component;
      let service: StubbedInstance&lt;Service>;

      beforeEach(() => {
        service = stubInterface&lt;Service>();
        sut = new Component(service);
      });
      afterEach(() => sinon.restore());

      it("should process empty items", () => {
        // Given
        service.getItems.return([]);

        // When
        const result = sut.getGroupedItems();

        // Then
        expect(result).to.equal(new Map());
      })
    });

  mixin L2_Base(highlight = "")
    section(data-auto-animate data-auto-animate-id="L2")
      h3(data-id="code-title" class="level") L2: #{L2}
      pre(data-id="code-animation")
        code(class='language-typescript' data-line-numbers=highlight)
          | class Service {
          |   getItems() { return fetch('www.get-items.com'); }
          | }
          |
          | class Component {
          |   private service = new Service();
          |   // constructor(private service: Service) { }
          |   getGroupedItems() {
          |     return this.service.getItems()
          |       .then(response => response.json())
          |       .then(items => items.reduce(
          |         (map, item) => {
          |           const group = map.get(item.group) ?? [];
          |           group.push(item);
          |           map.set(item.group, group);
          |           return map;
          |         }, new Map())
          |       );
          |   }
          | }
          |
          |
          block

  +L2_Base("|6-7")

  +L2_Base("22-35|22,30-31").
    import * as ServiceModule from './service';

    describe("L2", () => {
      let sut: Component;
      let service: StubbedInstance&lt;Service>;

      beforeEach(() => {
        service = stubInterface&lt;Service>();
        // Override what the constructor of Service returns
        sinon.stub(ServiceModule, "Service").returns(service);
        sut = new Component(service);
      });
      afterEach(() => sinon.restore());
    });

  +L2_Base("36-45").
    import * as ServiceModule from './service';

    describe("L2", () => {
      let sut: Component;
      let service: Service;

      beforeEach(() => {
        service = stubInterface&lt;Service>();
        // Override what the constructor of Service returns
        sinon.stub(ServiceModule, "Service").returns(service);
        sut = new Component(service);
      });
      afterEach(() => sinon.restore());

      it("should process empty items", () => {
        // Given
        service.getItems.return([]);

        // When
        const result = sut.getGroupedItems();

        // Then
        expect(result).to.equal(new Map());
      })
    });

  section(data-auto-animate data-auto-animate-id="L2")
    h3(data-id="code-title" class="level") L2: #{L2}
    p Try to avoid this style as it makes tests needlessly complex
    p Use Dependency Injection instead to keep tests clean

  mixin L3_Base(highlight = "")
    section(data-auto-animate data-auto-animate-id="L3")
      h3(data-id="code-title" class="level") L3: #{L3}
      pre(data-id="code-animation")
        code(class='language-typescript' data-line-numbers=highlight)
          | class Component {}
          |   public readonly id: number;
          |
          |   constructor(url: string) {
          |     const urlWrapper = new URL(url);
          |     const idParam = urlWrapper.searchParams.get("id");
          |     if (!idParam) {
          |       throw new Error('The id parameter is required');
          |     }
          |     const parsedId = +idParam;
          |     if (Object.is(parsedId, NaN)) {
          |       throw new Error('The id parameter is not a number');
          |     }
          |     this.id = parsedId;
          |   }
          | }
          |
          |
          block

  +L3_Base("|8,12")

  +L3_Base("18-23").
    describe("L3", () => {
      let sut: Component;
      const initTest = (url) => {
        sut = new Component(url);
      }
    });

  +L3_Base("24-33|20-22,26").
    describe("L3", () => {
      let sut: Component;
      const initTest = (url) => {
        sut = new Component(url);
      }

      it("should parse id successfully", () => {
        // Given
        initTest("http://test.com?id=1");

        // When
        const result = sut.id;

        // Then
        expect(result).to.equal(1);
      });
    });

  section(data-auto-animate data-auto-animate-id="L3")
    h3(data-id="code-title" class="level") L3: #{L3}
    p.
      Usually needed when you want to test something within the constructor
      or for L4/L6

  mixin L4_Base(highlight = "")
    section(data-auto-animate data-auto-animate-id="L4")
      h3(data-id="code-title" class="level") L4: #{L4}
      pre(data-id="code-animation")
        code(class='language-typescript' data-line-numbers=highlight)
          | export function hasElement(
          |   items: (number | string)[],
          |   value: number | string
          | ): boolean {
          |   return !!items.find((x) => x === value);
          | }
          |
          |
          block

  +L4_Base()

  +L4_Base("8-16").
    describe("L4", () => {
      describe("number values", () => {

      });
      describe("string values", () => {

      });
    });

  +L4_Base("10-19|22-31").
    describe("L4", () => {
      describe("number values", () => {
        it("should find value", () => {
          // Given
          const items = [1, 2, "3", "4"];

          // When
          const result = hasElement(items, 1);

          // Then
          expect(result).to.be.true;
        });
      });
      describe("string values", () => {
        it("should find value", () => {
          // Given
          const items = [1, 2, "3", "4"];

          // When
          const result = hasElement(items, "3");

          // Then
          expect(result).to.be.true;
        });
      });
    });

  style.
    .l4-container {
      display: grid;
      grid-template-columns: 1fr 1fr
    }

  section(data-auto-animate data-auto-animate-id="L4")
    h3(data-id="code-title" class="level") L4: #{L4}
    .l4-container
      ul(data-id="order")
        li describe
        ul
          li beforeEach (1)
          li before (2)
          li it (3)

  section(data-auto-animate data-auto-animate-id="L4")
    h3(data-id="code-title" class="level") L4: #{L4}
    .l4-container
      ul(data-id="order")
        li describe
        ul
          li beforeEach (1)
          li before (2)
          li it (3)
      p(data-id="order-result") 2,1,3

  section(data-auto-animate data-auto-animate-id="L4")
    h3(data-id="code-title" class="level") L4: #{L4}
    .l4-container
      ul(data-id="order")
        li describe
        ul
          li beforeEach (1)
          li before (2)
          li it (3)
          li describe
          ul
            li afterEach (4)
            li it (5)
            li it (6)
          li describe
          ul
            li beforeEach (7)
            li it (8)
            li it (9)

  section(data-auto-animate data-auto-animate-id="L4")
    h3(data-id="code-title" class="level") L4: #{L4}
    .l4-container
      ul(data-id="order")
        li describe
        ul
          li beforeEach (1)
          li before (2)
          li it (3)
          li describe
          ul
            li afterEach (4)
            li it (5)
            li it (6)
          li describe
          ul
            li beforeEach (7)
            li it (8)
            li it (9)
      p(data-id="order-result") 2, <br>(1,3), <br>(1,5,4,6,4), <br>(1,7,8,7,9)
