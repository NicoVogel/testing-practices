section
  section(id="what-should-you-actually-test")
    h2 What should you actually test?
    ul
      li classes?
      li functions?
      li attributes?
      li services?
      li components?
      li ...?
    aside(class='notes').
      The fist thing to understand is what are we actually testing in unit tests
      What do you think, which of these do we test?
      As always, the answer is: (next slide)

  section
    p What do you actually test?
    h3 Behavior
    p (Acceptance criteria)
    aside(class='notes').
      This is a clear must do and it should not be open to debate.

  section
    img(class='r-stretch' src='img/confused-meme.jpg' style='background: white')

  section
    h3 How to test behavior?
    ul
      li ensure that the system is in the correct state
      li execute some action
      li expect that the system changed according to the behavior
    p.
      Most of the time it's calling a function or an object's method.

  section
    h3 Common mistakes to avoid
    ul
      li testing every function of a class
      li testing every attribute of a class
      li making assertions that some internal stuff happens in a class
    aside(class='notes').
      Lets look at an example.

  section
    p.
      Imagine you work on a feature and your class gets bigger and bigger.
      At some point you decide this is no longer understandable and you split
      the class into multiple classes with one class (Main) that handles the others.
    p
      b Behavior Tests do not break when refactoring
    blockquote.
      As the other classes are just implementation detail
      they should not be mocked.
    aside(class='notes').
      You should not even write tests for such implementations.
      In case that you want or need to test them, you need to mark them
      in some way that they are deleted if needed, as they only reflect a
      partial behavior.

  section
    h3 Don't test implementation details
    p.
      The sub classes don't need tests.
      If you want to test them anyways, then mark the tests as
      "throw away" or something similar.
    aside(class='notes').
      Whenever implementation details a^^re tested, then you need to
      expect that you need to remove the tests when the code is refactored.

  section
    h3 What are the benefits of this?
    p.
      Tests only break if you change the behavior of the system
      and not if you refactor code
