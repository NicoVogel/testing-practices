section
  section(id="what-should-you-actually-test")
    h2 What should you actually test?
    ul
      li classes?
      li functions?
      li attributes?
      li services?
      li components?
      li ...?
    aside(class='notes').
      The fist thing to understand is what are we actually testing in unit tests
      What do you think, which of these do we test?
      As always, the answer is: (next slide)

  section
    p What do you actually test?
    h3 Behavior
    p (Acceptance criteria)
    aside(class='notes').
      This is a clear must do and it should not be open to debate.

  section
    img(class='r-stretch' src='img/confused-meme.jpg' style='background: white')

  - var howToTest_header = 'How to test behavior?';
  - var howToTest_1 = 'ensure that the system is in the correct state (Given)';
  - var howToTest_2 = 'execute some action (When)';
  - var howToTest_3 = 'expect that the system changed according to the behavior (Then)';

  section(data-auto-animate)
    h3=howToTest_header

  section(data-auto-animate)
    h3=howToTest_header
    ol
      li=howToTest_1

  section(data-auto-animate)
    h3=howToTest_header
    ol
      li=howToTest_1
      li=howToTest_2

  section(data-auto-animate)
    h3=howToTest_header
    ol
      li=howToTest_1
      li=howToTest_2
      li=howToTest_3

  section(data-auto-animate)
    h3=howToTest_header
    ol
      li=howToTest_1
      li=howToTest_2
      li=howToTest_3
    blockquote
      | Calling a
      b  public
      |  function or object method

  section
    h3 Example -> Router
    pre
      code(class="language-typescript" data-line-numbers="2,8-13|15-22|16-17,22|29-35|40-42|44-51|53-61").
        // src/router.ts
        export class Router {
          private _currentRoute: Route;
          public get currentRoute() {
            return this._currentRoute;
          }

          constructor(private routes: Route[]) {
            if (routes.length === 0) {
              throw new Error("Business Error, Router cannot function without routes.");
            }
            this._currentRoute = this.getDefaultRoute();
          }

          public handleUrlChange(url: string) {
            const route = this.findRoute(this.routes, url)
              ?? this.getDefaultRoute();
            if (route === this._currentRoute) {
              return;
            }
            this._currentRoute = route;
            this.updateShownPage(route);
          }

          private getDefaultRoute(): Route {
            return this.routes[0];
          }

          private findRoute(routes: Route[], url: string): Route | undefined {
            const possibleMatches = this.findMatches(routes, url);
            if (possibleMatches.length === 0) {
              return undefined;
            }
            return this.findBestMatch(possibleMatches);
          }
        }

        // src/router.spec.ts
        describe("Router", () => {
          it("should fail fast, when no routes are provided", () => {
            expect(() => new Router([])).to.throw();
          });

          it("should change route", () => {
            const routes = [{ path: "/user" }, { path: "/profile" }];
            const router = new Router(routes);

            router.handleUrlChange("/profile");

            expect(router.currentRoute).to.equal({ path: "/profile" });
          });

          it("should not change current route, if it is the same route", () => {
            const routes = [{ path: "/user" }, { path: "/profile" }];
            const router = new Router(routes);
            const currentRoute = router.currentRoute;

            router.handleUrlChange("/user");

            expect(router.currentRoute).to.equal(currentRoute);
          });
        });
    aside(class="notes")
      ul
        li Imagine a router
        li we need to handle url changes -> findRoute + updateShownPage
        li concentrate on findRoute for a moment
        li could be refactored out -> separation of concerns
        li before, quick look at tests

  style.
    .what-to-test-example-container {
      display: grid;
      grid-template-columns: 1fr 1fr;
    }

  section
    h3 Example -> Split Router
    .what-to-test-example-container
      h4 Old
      h4 New
      ul
        li router.ts
        li router.spec.ts
      ul
        li find-route.ts
        li find-route.spec.ts
        li router.ts
        li router.spec.ts
    aside(class="notes").
      While it was all in one file before, now the find-route is extracted as a first step

  section
    h3 Example -> Split Router
    pre
      code(class="language-typescript" data-line-numbers="2|16|29|55-61|64-68|70-74").
        // src/router.ts
        export class Router {
          private _currentRoute: Route;
          public get currentRoute() {
            return this._currentRoute;
          }

          constructor(private routes: Route[]) {
            if (routes.length === 0) {
              throw new Error("Business Error, Router cannot function without routes.");
            }
            this._currentRoute = this.getDefaultRoute();
          }

          public handleUrlChange(url: string) {
            const route = findRoute(this.routes, url) ?? this.getDefaultRoute();
            if (route === this._currentRoute) {
              return;
            }
            this._currentRoute = route;
            this.updateShownPage(route);
          }

          private getDefaultRoute(): Route {
            return this.routes[0];
          }
        }
        // src/router.spec.ts
        describe("Router", () => {
          it("should fail fast, when no routes are provided", () => {
            expect(() => new Router([])).to.throw();
          });

          it("should change route", () => {
            const routes = [{ path: "/user" }, { path: "/profile" }];
            const router = new Router(routes);

            router.handleUrlChange("/profile");

            expect(router.currentRoute).to.equal({ path: "/profile" });
          });

          it("should not change current route, if it is the same route", () => {
            const routes = [{ path: "/user" }, { path: "/profile" }];
            const router = new Router(routes);
            const currentRoute = router.currentRoute;

            router.handleUrlChange("/user");

            expect(router.currentRoute).to.equal(currentRoute);
          });
        });

        // find-route.ts
        export function findRoute(routes: Route[], url: string): Route | undefined {
          const possibleMatches = findMatches(routes, url);
          if (possibleMatches.length === 0) {
            return undefined;
          }
          return findBestMatch(possibleMatches);
        }
        // find-route.spec.ts
        describe("Find Route", () => {
          it("should find no route if no routes are provided", () => {
            const routes: Route[] = [];
            const result = findRoute(routes, "");
            expect(result).to.be.undefined;
          });

          it("should find no route if the url does not match any route", () => {
            const routes: Route[] = [{ path: "/user" }];
            const result = findRoute(routes, "");
            expect(result).to.be.undefined;
          });
          // ...
        });
    aside(class="notes")
      ul
        li router implementation did not really change
        li only moved find-route code out
        li router tests did not change


  section
    h3 Example takeaways
    ul
      li The tests for router are not affected by the extraction
      li The find-route function was not mocked
      li Only the interface was tested (only public)
      li We were able to test system behavior on a smaller level
    aside(class="notes")
      ul
        li You should not split the code infinitely, just so that you can test everything
        li Instead keep it to a small understandable context at minimum


  section
    h3 Why keep tests in router for find-route?
    p.
      You don't know how the code later will be refactored.
      This ensures that the behavior is preserved even if the
      underlying code is changed.

  section
    h3 Behavior Tests do not break when refactoring
    aside(class="notes").
      As long as you don't change the public interface.

  section
    h2 A few tips to keep in mind

  section
    h3 Common mistakes to avoid
    ul
      li testing every function of a class
      li testing every attribute of a class
      li making assertions that some internal stuff happens in a class -> test the interface

  section
    h3 Don't split to much
    p You should not split your code needlessly, just so that you can test everything.
    p Instead, aim for small understandable contexts, like "find-route"
